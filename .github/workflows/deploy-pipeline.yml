name: Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and Push Docker images
      run: |
        docker compose -f docker-compose.yml build
        docker tag ai-trs-app-ai-trs-app felixokpalaima/ai-trs-app:${{ github.sha }}
        docker push felixokpalaima/ai-trs-app:${{ github.sha }}
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}


  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Copy Docker Compose file to Server
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "docker-compose-deploy.yml"
        target: "/home/ubuntu/deployment/"

    - name: Create .env file on the server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
            echo "IMAGE_TAG=${{ github.sha }}" > /home/ubuntu/deployment/.env
            echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> /home/ubuntu/deployment/.env
        

    - name: Login to Docker Hub on Server and Deploy Applicaton
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}  
        script: |
            echo "Logging into Docker Hub..."
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin
            echo "Logged in successfully." 
            cd /home/ubuntu/deployment/
            cat .env
            docker compose -f docker-compose-deploy.yml up -d --scale app=2 --force-recreate
            sleep 60  
            # Get the container ID of the newly deployed container
            new_container_id=$(docker ps -q | head -n1)
            # Check logs of the new container
            logs=$(docker container logs "$new_container_id")

            # Check if logs contain the desired message
            if echo "$logs" | grep -q "Server is running on http://localhost:3000"; then
                echo "New instances are healthy, scaling down..."
                docker compose -f docker-compose-deploy.yml up -d --scale app=1
            else
                echo "Health checks failed, aborting scaling down."
            fi

