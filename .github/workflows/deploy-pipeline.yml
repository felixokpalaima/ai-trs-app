name: Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    # - name: Set up Docker BuildKit
    #   run: echo "DOCKER_BUILDKIT=1" >> $GITHUB_ENV
    
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and Push Docker images
      run: |
        docker compose -f docker-compose.yml build ai-trs-app
        docker tag ai-trs-app:latest felixokpalaima/ai-trs-app:${{ github.sha }}
        docker push felixokpalaima/ai-trs-app:${{ github.sha }}
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}


  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Copy Docker Compose file to Server
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "docker-compose.yml"
        target: "/home/ubuntu/deployment/"

    - name: Create .env file on the server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          echo "IMAGE_TAG=${{ github.sha }}" > /home/ubuntu/deployment/.env

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Deploy to Server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # export IMAGE_TAG=${{ github.sha }}
          cd /home/ubuntu/deployment/
          docker pull felixokpalaima/ai-trs-app:${{ github.sha }}
          docker compose up -d --scale ai-trs-app=2 --force-recreate
          sleep 60  
          # Check the health of the service
          if docker compose ps | grep "healthy"; then
            echo "New instances are healthy, scaling down..."
            docker compose up -d --scale ai-trs-app=1
          else
            echo "Health checks failed, aborting scale down."
          fi
